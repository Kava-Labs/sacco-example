/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.kava.saccoexample;

import network.commercio.sacco.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import java.util.concurrent.ExecutionException;
import network.commercio.sacco.models.messages.MsgSend;
import network.commercio.sacco.models.types.StdCoin;
import network.commercio.sacco.models.types.StdTx;
import network.commercio.sacco.models.types.StdFee;

public class App {
    public static void main(String[] args) throws InterruptedException {
      String[] mnemonic = "24 word mneomic goes here".split(" ");

      NetworkInfo networkInfo = new NetworkInfo("kava", "https://kava3.data.kava.io", null, null, null);

      Wallet wallet = Wallet.Companion.derive(Arrays.asList(mnemonic), networkInfo, "m/44'/459'/0'/0/0");

      String sender = wallet.getBech32Address();
      String recipient = "kava1someRecipientBech32AddressGoesHere";

      MsgSend msgSend = new MsgSend(
          sender,
          recipient,
          Arrays.asList(new StdCoin("ukava", "100"))
          );

      StdFee stdFee = new StdFee(Collections.emptyList(),"200000");

      StdTx stdTx = TxBuilder.INSTANCE.buildStdTx(
          Arrays.asList(msgSend),
          "",
          stdFee
          );

      try {
        Future<StdTx> signedTxFuture = TxSigner.INSTANCE.signStdTxAsync(wallet, stdTx);
        StdTx signedTx = signedTxFuture.get();

        Future<TxResponse> txResponseFuture = TxSender.INSTANCE.broadcastStdTxAsync(
            signedTx,
            wallet,
            "sync"
            );

        TxResponse txResponse = txResponseFuture.get();

        if (txResponse instanceof TxResponse.Successful) {
          String txHash = ((TxResponse.Successful) txResponse).getTxHash();

          System.out.println("***************************");
          System.out.println("* TX Broadcast Successful *");
          System.out.println("***************************");

          System.out.println("TxHash: " + txHash);
        } else if (txResponse instanceof TxResponse.Error) {
          TxResponse.Error error = (TxResponse.Error) txResponse;

          System.out.println("***************************");
          System.out.println("* TX Broadcast Failed     *");
          System.out.println("***************************");

          System.out.println("Code: " + error.getCode());
          System.out.println("Message: " + error.getMessage());
        }
      } catch (ExecutionException e) {
        System.out.println("Failed with " + e);
        System.exit(1);
      }

      System.exit(0);
    }
}
